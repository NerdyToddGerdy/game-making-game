import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Date;
import java.util.TimerTask;

public class GameMakingGame {
    private JLabel header;
    private JPanel mainPanel;
    private JButton clickMeButton;
    private JLabel AmountOnHand;
    private JButton upgradeButton;
    private JLabel nextUpgradeText;
    private JLabel nextUpgradeName;
    private int total = 0;
    private int incrementalNum = 1;
    private int nextUpgrade = 10;
    private int currentUpgradeNum = 1;
    private String nextUpgradeString;

    public GameMakingGame() {
        clickMeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                total += incrementalNum;
                AmountOnHand.setText(Integer.toString(total));
                if (total >= nextUpgrade) {
                    upgradeButton.setEnabled(true);
                }
            }
        });
        upgradeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                total -= nextUpgrade;
                incrementalNum *= 2;
                upgradeButton.setEnabled(false);
                nextUpgrade *= 3;
                switch (currentUpgradeNum) {
                    case 1:
                        nextUpgradeText.setVisible(true);
                        break;
                    case 2:
                        incrementalNum *= 2;
                        break;
                    case 3:
                        nextUpgradeName.setVisible(true);
                        nextUpgradeString = "faster upgrade";
                        break;
                    case 4:
                        incrementalNum *= 2;
                        nextUpgradeString = "auto click";
                        break;
                    case 5:
//                        givenUsingTimer_whenSchedulingRepeatedTask_thenCorrect();
                        break;
                        
                }
                nextUpgradeText.setText("next update :" + nextUpgrade);
                nextUpgradeName.setText("next upgrade: " + nextUpgradeString);
                currentUpgradeNum++;
                AmountOnHand.setText(Integer.toString(total));

            }
        });
    }

//    public void givenUsingTimer_whenSchedulingRepeatedTask_thenCorrect() {
//        TimerTask repeatedTask = new TimerTask() {
//            @Override
//            public void run() {
//                System.out.println("Task performed on " + new Date());
//            }
//        };
//        Timer timer = new Timer("Timer");
//
//        long delay = 1000L;
//        long period = 1000L;
//        timer.scheduleAtFixedRate(repeatedTask, delay, period);
//    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("GameMakingGame");
        frame.setContentPane(new GameMakingGame().mainPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(6, 2, new Insets(0, 0, 0, 0), -1, -1));
        header = new JLabel();
        header.setText("Nerdy Gerdy's Game Making Game");
        mainPanel.add(header, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        mainPanel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 5, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        clickMeButton = new JButton();
        clickMeButton.setText("Click Me!");
        mainPanel.add(clickMeButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        AmountOnHand = new JLabel();
        AmountOnHand.setText("Label");
        mainPanel.add(AmountOnHand, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        upgradeButton = new JButton();
        upgradeButton.setEnabled(false);
        upgradeButton.setText("Upgrade");
        mainPanel.add(upgradeButton, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nextUpgradeText = new JLabel();
        nextUpgradeText.setText("Label");
        nextUpgradeText.setVisible(false);
        mainPanel.add(nextUpgradeText, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nextUpgradeName = new JLabel();
        nextUpgradeName.setText("next upgrade:");
        nextUpgradeName.setVisible(false);
        mainPanel.add(nextUpgradeName, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
